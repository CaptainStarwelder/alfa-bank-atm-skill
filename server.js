const express = require('express');
const axios = require('axios');
const app = express();
app.use(express.json());

// üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const YANDEX_MAPS_API_KEY = 'ac9862df-83e1-4188-92a2-b6e0b5f01046'; // <-- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
const BANKOMATS_DATA_URL = 'https://script.google.com/macros/s/AKfycbzWjsGkg2J-kNsK2hRUsMSU2ci6ygCrmme6skX5CoVG4AItDuxGBN26nmPjfQppxovOwg/exec'; // <-- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL

// –ö—ç—à –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
const coordinatesCache = {};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –∞–¥—Ä–µ—Å—É
async function getCoordinates(address) {
  if (coordinatesCache[address]) {
    return coordinatesCache[address];
  }

  try {
    const url = `https://geocode-maps.yandex.ru/1.x/?apikey=${YANDEX_MAPS_API_KEY}&format=json&geocode=${encodeURIComponent(address)}`;
    const res = await axios.get(url);
    const geoObjects = res.data.response.GeoObjectCollection.featureMember;

    if (geoObjects.length > 0) {
      const pos = geoObjects[0].GeoObject.Point.pos.split(' ');
      const coordinates = {
        lon: parseFloat(pos[0]),
        lat: parseFloat(pos[1])
      };
      coordinatesCache[address] = coordinates;
      return coordinates;
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', err.message);
  }

  return null;
}

// –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(lat1 * Math.PI / 180) *
    Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLon / 2) ** 2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

// üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ê–ª–∏—Å—ã
app.post('/', async (req, res) => {
  try {
    const { request, session, state } = req.body;
    const userMessage = request.original_utterance?.toLowerCase() || '';
    let sessionState = state?.session || {};

    const response = {
      response: {
        text: '',
        tts: '',
        buttons: [],
        end_session: false
      },
      session,
      version: '1.0',
      session_state: sessionState
    };

    // ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ "–ø–æ–º–æ—â—å"
    if (
      request.command === '' ||
      userMessage.includes('–ø–æ–º–æ—â—å') ||
      userMessage.includes('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å') ||
      userMessage.includes('–Ω–∞—á–∞—Ç—å') ||
      userMessage.includes('–ø—Ä–∏–≤–µ—Ç')
    ) {
      response.response.text = '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –±–∞–Ω–∫–æ–º–∞—Ç –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ù–∞–π–¥–∏ –±–∞–Ω–∫–æ–º–∞—Ç —Ä—è–¥–æ–º —Å —É–ª–∏—Ü–µ–π –õ–µ–Ω–∏–Ω–∞".';
      response.response.buttons = [
        { title: '–ù–∞–π—Ç–∏ –±–∞–Ω–∫–æ–º–∞—Ç', hide: true },
        { title: '–ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç', hide: true }
      ];
      return res.json(response);
    }

    // üß≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –±–∞–Ω–∫–æ–º–∞—Ç–∞
    if (userMessage.includes('–±–∞–Ω–∫–æ–º–∞—Ç')) {
      let userLocation = null;
      let userAddress = '';

      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      if (request.meta?.location?.lat && request.meta?.location?.lon) {
        userLocation = {
          lat: request.meta.location.lat,
          lon: request.meta.location.lon
        };
      } else {
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        const match = userMessage.match(/(—Ä—è–¥–æ–º —Å|–æ–∫–æ–ª–æ|–≤–æ–∑–ª–µ|–Ω–∞)\s+(.*)/i);
        if (match && match[2]) {
          userAddress = match[2].trim();
        } else {
          userAddress = userMessage.replace(/–Ω–∞–π–¥–∏|–±–∞–Ω–∫–æ–º–∞—Ç|—Ä—è–¥–æ–º|—Å|–æ–∫–æ–ª–æ|–≤–æ–∑–ª–µ|–Ω–∞/gi, '').trim();
        }

        if (userAddress.length < 3) {
          response.response.text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å.';
          return res.json(response);
        }

        const coords = await getCoordinates(userAddress);
        if (coords) {
          userLocation = coords;
        } else {
          response.response.text = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.';
          return res.json(response);
        }
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–∫–æ–º–∞—Ç–æ–≤
      const bankomatsRes = await axios.get(BANKOMATS_DATA_URL);
      const bankomats = bankomatsRes.data;

      const bankomatsWithCoords = await Promise.all(
        bankomats.map(async (bankomat) => {
          const coords = await getCoordinates(bankomat.–ê–¥—Ä–µ—Å);
          if (coords) {
            return {
              ...bankomat,
              coordinates: coords
            };
          }
          return null;
        })
      );

      const validBankomats = bankomatsWithCoords.filter(Boolean);

      // –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –±–∞–Ω–∫–æ–º–∞—Ç–∞
      let nearest = null;
      let minDistance = Infinity;

      for (const bankomat of validBankomats) {
        const dist = calculateDistance(
          userLocation.lat,
          userLocation.lon,
          bankomat.coordinates.lat,
          bankomat.coordinates.lon
        );
        if (dist < minDistance) {
          minDistance = dist;
          nearest = bankomat;
        }
      }

      if (nearest) {
        const distanceText = minDistance < 1
          ? `${Math.round(minDistance * 1000)} –º–µ—Ç—Ä–æ–≤`
          : `${minDistance.toFixed(1)} –∫–º`;

        response.response.text = `–ë–ª–∏–∂–∞–π—à–∏–π –±–∞–Ω–∫–æ–º–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: ${nearest.–ê–¥—Ä–µ—Å}. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distanceText}. –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${nearest['–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç?`;

        sessionState.foundBankomat = {
          address: nearest.–ê–¥—Ä–µ—Å,
          coordinates: nearest.coordinates
        };
        sessionState.userLocation = userLocation;
        response.session_state = sessionState;

        response.response.buttons = [
          { title: '–ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç', hide: true },
          { title: '–ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π', hide: true }
        ];
      } else {
        response.response.text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –±–∞–Ω–∫–æ–º–∞—Ç–æ–≤.';
      }

      return res.json(response);
    }

    // üó∫ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    if (userMessage.includes('–ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç') || userMessage === '–¥–∞') {
      const bankomat = sessionState.foundBankomat;
      const userLoc = sessionState.userLocation;

      if (bankomat && userLoc) {
        const mapsUrl = `https://yandex.ru/maps/?rtext=${userLoc.lat},${userLoc.lon}~${bankomat.coordinates.lat},${bankomat.coordinates.lon}&rtt=auto`;
        response.response.text = '–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö:';
        response.response.buttons = [
          {
            title: '–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç',
            url: mapsUrl,
            hide: false
          }
        ];
      } else {
        response.response.text = '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –±–∞–Ω–∫–æ–º–∞—Ç. –°–∫–∞–∂–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ù–∞–π–¥–∏ –±–∞–Ω–∫–æ–º–∞—Ç —Ä—è–¥–æ–º —Å —É–ª–∏—Ü–µ–π –õ–µ–Ω–∏–Ω–∞".';
      }

      return res.json(response);
    }

    // üîÅ –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –±–∞–Ω–∫–æ–º–∞—Ç
    if (userMessage.includes('–Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π')) {
      response.response.text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–π –±–∞–Ω–∫–æ–º–∞—Ç.';
      return res.json(response);
    }

    // –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    response.response.text = '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –±–∞–Ω–∫–æ–º–∞—Ç –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ: "–ù–∞–π–¥–∏ –±–∞–Ω–∫–æ–º–∞—Ç —Ä—è–¥–æ–º —Å —É–ª–∏—Ü–µ–π –õ–µ–Ω–∏–Ω–∞".';
    return res.json(response);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ webhook:', error.message);
    return res.json({
      response: {
        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        end_session: true
      },
      version: '1.0'
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get('/', (req, res) => {
  res.send('–°–µ—Ä–≤–∏—Å –Ω–∞–≤—ã–∫–∞ –ë–∞–Ω–∫–æ–º–∞—Ç—ã –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
